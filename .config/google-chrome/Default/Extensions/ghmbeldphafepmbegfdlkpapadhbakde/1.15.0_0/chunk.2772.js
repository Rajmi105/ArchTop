"use strict";(globalThis.webpackChunkproton_pass_extension=globalThis.webpackChunkproton_pass_extension||[]).push([[2772],{77680:(e,t,i)=>{i.d(t,{B:()=>n}),
/*! OpenPGP.js v6.0.0-alpha.0 - 2023-12-12 - this is LGPL licensed code, see LICENSE/our website https://openpgpjs.org/ for more information. */
"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;class n{static setImplementation(e,t=!1){if(n.Implementation&&!t)throw Error("Implementation already set");n.Implementation=e}static new(e){return new n.Implementation(e)}}},32772:(e,t,i)=>{i.d(t,{default:()=>r});var n=i(77680);
/*! OpenPGP.js v6.0.0-alpha.0 - 2023-12-12 - this is LGPL licensed code, see LICENSE/our website https://openpgpjs.org/ for more information. */"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;class r extends n.B{constructor(e){if(super(),void 0===e)throw Error("Invalid BigInteger input");if(e instanceof Uint8Array){const t="0123456789ABCDEF";let i="";e.forEach((e=>{i+=t[e>>4]+t[15&e]})),this.value=BigInt("0x0"+i)}else this.value=BigInt(e)}clone(){return new r(this.value)}iinc(){return this.value++,this}inc(){return this.clone().iinc()}idec(){return this.value--,this}dec(){return this.clone().idec()}iadd(e){return this.value+=e.value,this}add(e){return this.clone().iadd(e)}isub(e){return this.value-=e.value,this}sub(e){return this.clone().isub(e)}imul(e){return this.value*=e.value,this}mul(e){return this.clone().imul(e)}imod(e){return this.value%=e.value,this.isNegative()&&this.iadd(e),this}mod(e){return this.clone().imod(e)}modExp(e,t){if(t.isZero())throw Error("Modulo cannot be zero");if(t.isOne())return new r(0);if(e.isNegative())throw Error("Unsopported negative exponent");let i=e.value,n=this.value;n%=t.value;let s=BigInt(1);for(;i>BigInt(0);){const e=i&BigInt(1);i>>=BigInt(1);const r=s*n%t.value;s=e?r:s,n=n*n%t.value}return new r(s)}modInv(e){const{gcd:t,x:i}=this._egcd(e);if(!t.isOne())throw Error("Inverse does not exist");return i.add(e).mod(e)}idiv(e){return this.value/=e.value,this}div(e){return this.clone().idiv(e)}_egcd(e){let t=BigInt(0),i=BigInt(1),n=BigInt(1),s=BigInt(0),u=this.abs().value,l=e.abs().value;const a=this.isNegative(),o=e.isNegative();for(;l!==BigInt(0);){const e=u/l;let r=t;t=n-e*t,n=r,r=i,i=s-e*i,s=r,r=l,l=u%l,u=r}return{x:new r(a?-n:n),y:new r(o?-s:s),gcd:new r(u)}}gcd(e){let t=this.value,i=e.value;for(;i!==BigInt(0);){const e=i;i=t%i,t=e}return new r(t)}ileftShift(e){return this.value<<=e.value,this}leftShift(e){return this.clone().ileftShift(e)}irightShift(e){return this.value>>=e.value,this}rightShift(e){return this.clone().irightShift(e)}ixor(e){return this.value^=e.value,this}xor(e){return this.clone().ixor(e)}ibitwiseAnd(e){return this.value&=e.value,this}bitwiseAnd(e){return this.clone().ibitwiseAnd(e)}ibitwiseOr(e){return this.value|=e.value,this}equal(e){return this.value===e.value}lt(e){return this.value<e.value}lte(e){return this.value<=e.value}gt(e){return this.value>e.value}gte(e){return this.value>=e.value}isZero(){return this.value===BigInt(0)}isOne(){return this.value===BigInt(1)}isNegative(){return this.value<BigInt(0)}isEven(){return!(this.value&BigInt(1))}abs(){const e=this.clone();return this.isNegative()&&(e.value=-e.value),e}negate(){const e=this.clone();return e.value=-e.value,e}toString(){return this.value.toString()}toNumber(){const e=Number(this.value);if(e>Number.MAX_SAFE_INTEGER)throw Error("Number can only safely store up to 53 bits");return e}getBit(e){return(this.value>>BigInt(e)&BigInt(1))===BigInt(0)?0:1}bitLength(){const e=new r(0),t=new r(1),i=new r(-1),n=this.isNegative()?i:e;let s=1;const u=this.clone();for(;!u.irightShift(t).equal(n);)s++;return s}byteLength(){const e=new r(0),t=new r(-1),i=this.isNegative()?t:e,n=new r(8);let s=1;const u=this.clone();for(;!u.irightShift(n).equal(i);)s++;return s}toUint8Array(e="be",t){let i=this.value.toString(16);i.length%2==1&&(i="0"+i);const n=i.length/2,r=new Uint8Array(t||n),s=t?t-n:0;let u=0;for(;u<n;)r[u+s]=parseInt(i.slice(2*u,2*u+2),16),u++;return"be"!==e&&r.reverse(),r}}}}]);
//# sourceMappingURL=chunk.2772.js.map